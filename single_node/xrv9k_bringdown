#!/bin/bash
DEBUG=0
SECONDS=0
RED='\033[0;31m'
NC='\033[0m' # No Color
GREEN='\033[0;32m'
echo "####################################################"
echo -e "${GREEN}Initializing terraform ...${NC}"
echo "####################################################"


if [ $DEBUG -ne 0 ]; then
    echo "Enabling Terraform debugs"
    TF_LOG="trace"
else
    echo "Disabling Terraform debugs"
    TF_LOG="off"
fi

# Init Terraform to run against AWS EC2 before launching xrv9k instance 
docker run -it --rm --name ami_builder -v ~/.ssh:/root/.ssh \
           -v ${PWD}/aws:/root/.aws \
           -v ${PWD}/ssh_config:/root/.ssh/config  \
           -v ${PWD}:/root/terraform \
           -w /root/terraform akshshar/xrv9kami \
           /bin/bash -c "export TF_LOG=$TF_LOG && /usr/bin/terraform init"

if [ $? -ne 0 ]; then
   echo -e "${RED}Failed to initialize terraform xrv9k bringup, exiting...${NC}"
   duration=$SECONDS
   echo "$(($duration / 60)) mins $(($duration % 60)) seconds elapsed."
   exit 1
else

    echo "####################################################"
    echo -e "${GREEN}Bringing down setup ... ${NC}"
    echo "####################################################"

    # Destroy the launched instance 
    docker run -it --rm --name ami_builder -v ~/.ssh:/root/.ssh \
               -v ${PWD}/aws:/root/.aws \
               -v ${PWD}/ssh_config:/root/.ssh/config  \
               -v ${PWD}:/root/terraform \
               -w /root/terraform akshshar/xrv9kami \
               /bin/bash -c " export TF_LOG=$TF_LOG && /usr/bin/terraform destroy --auto-approve"
    duration=$SECONDS
    echo "$(($duration / 60)) mins $(($duration % 60)) seconds elapsed."
    exit 1
fi
